// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: cards-queries.sql

package queries

import (
	"context"
)

const createCard = `-- name: CreateCard :one
INSERT INTO cards (
    deck_id, question, answer
) VALUES (
    $1, $2, $3
)
RETURNING id, question, answer, deck_id
`

type CreateCardParams struct {
	DeckID   int32  `json:"deck_id"`
	Question string `json:"question"`
	Answer   string `json:"answer"`
}

func (q *Queries) CreateCard(ctx context.Context, arg CreateCardParams) (Card, error) {
	row := q.db.QueryRow(ctx, createCard, arg.DeckID, arg.Question, arg.Answer)
	var i Card
	err := row.Scan(
		&i.ID,
		&i.Question,
		&i.Answer,
		&i.DeckID,
	)
	return i, err
}

const listCards = `-- name: ListCards :many
SELECT id, question, answer, deck_id FROM cards
WHERE deck_id = $1
ORDER BY question
`

func (q *Queries) ListCards(ctx context.Context, deckID int32) ([]Card, error) {
	rows, err := q.db.Query(ctx, listCards, deckID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Card
	for rows.Next() {
		var i Card
		if err := rows.Scan(
			&i.ID,
			&i.Question,
			&i.Answer,
			&i.DeckID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
