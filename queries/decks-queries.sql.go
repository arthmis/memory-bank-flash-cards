// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: decks-queries.sql

package queries

import (
	"context"
)

const createDeck = `-- name: CreateDeck :one
INSERT INTO decks (
    name
) VALUES (
    $1
)
RETURNING id, name
`

func (q *Queries) CreateDeck(ctx context.Context, name string) (Deck, error) {
	row := q.db.QueryRow(ctx, createDeck, name)
	var i Deck
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getDeck = `-- name: GetDeck :one
SELECT id, name FROM decks 
WHERE name = $1
`

func (q *Queries) GetDeck(ctx context.Context, name string) (Deck, error) {
	row := q.db.QueryRow(ctx, getDeck, name)
	var i Deck
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const listDecks = `-- name: ListDecks :many
SELECT id, name FROM decks 
ORDER BY name
`

func (q *Queries) ListDecks(ctx context.Context) ([]Deck, error) {
	rows, err := q.db.Query(ctx, listDecks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Deck
	for rows.Next() {
		var i Deck
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
