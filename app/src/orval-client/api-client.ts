/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Memory Bank API
 * OpenAPI spec version: 1.0.0
 */
export interface Cards {
  cards: Card[];
}

export interface Card {
  /** card id */
  id: number;
  /** The question for the card */
  question: string;
  answer: string;
  /** The id of the deck the card belongs to */
  deckId: number;
}

export type CreateDeckBody = {
  /** The name of the deck */
  name: string;
};

export type CreateDeck201 = {
  /** The id of the deck */
  id: number;
  /** The name of the deck */
  name: string;
};

export type GetDeckById200 = {
  /** The id of the deck */
  id: number;
  /** The name of the deck */
  name: string;
};

export type CreateCardBody = {
  /** The question for a card */
  question: string;
  /** The answer for a card */
  answer: string;
};

/**
 * @summary Create a new deck
 */
export type createDeckResponse201 = {
  data: CreateDeck201
  status: 201
}

export type createDeckResponse401 = {
  data: void
  status: 401
}
    
export type createDeckResponseComposite = createDeckResponse201 | createDeckResponse401;
    
export type createDeckResponse = createDeckResponseComposite & {
  headers: Headers;
}

export const getCreateDeckUrl = () => {


  

  return `/api/decks`
}

export const createDeck = async (createDeckBody: CreateDeckBody, options?: RequestInit): Promise<createDeckResponse> => {
  
  const res = await fetch(getCreateDeckUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      createDeckBody,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: createDeckResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as createDeckResponse
}



/**
 * @summary Get a deck by ID
 */
export type getDeckByIdResponse200 = {
  data: GetDeckById200
  status: 200
}

export type getDeckByIdResponse401 = {
  data: void
  status: 401
}
    
export type getDeckByIdResponseComposite = getDeckByIdResponse200 | getDeckByIdResponse401;
    
export type getDeckByIdResponse = getDeckByIdResponseComposite & {
  headers: Headers;
}

export const getGetDeckByIdUrl = (deckId: number,) => {


  

  return `/api/decks/${deckId}`
}

export const getDeckById = async (deckId: number, options?: RequestInit): Promise<getDeckByIdResponse> => {
  
  const res = await fetch(getGetDeckByIdUrl(deckId),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: getDeckByIdResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as getDeckByIdResponse
}



/**
 * @summary Get all cards in a deck
 */
export type getCardsByDeckIdResponse200 = {
  data: Cards
  status: 200
}

export type getCardsByDeckIdResponse401 = {
  data: void
  status: 401
}
    
export type getCardsByDeckIdResponseComposite = getCardsByDeckIdResponse200 | getCardsByDeckIdResponse401;
    
export type getCardsByDeckIdResponse = getCardsByDeckIdResponseComposite & {
  headers: Headers;
}

export const getGetCardsByDeckIdUrl = (deckId: number,) => {


  

  return `/api/decks/${deckId}/cards`
}

export const getCardsByDeckId = async (deckId: number, options?: RequestInit): Promise<getCardsByDeckIdResponse> => {
  
  const res = await fetch(getGetCardsByDeckIdUrl(deckId),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: getCardsByDeckIdResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as getCardsByDeckIdResponse
}



/**
 * @summary Create a new card in a deck
 */
export type createCardResponse201 = {
  data: Card
  status: 201
}

export type createCardResponse401 = {
  data: void
  status: 401
}
    
export type createCardResponseComposite = createCardResponse201 | createCardResponse401;
    
export type createCardResponse = createCardResponseComposite & {
  headers: Headers;
}

export const getCreateCardUrl = (deckId: number,) => {


  

  return `/api/decks/${deckId}/cards`
}

export const createCard = async (deckId: number,
    createCardBody: CreateCardBody, options?: RequestInit): Promise<createCardResponse> => {
  
  const res = await fetch(getCreateCardUrl(deckId),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      createCardBody,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: createCardResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as createCardResponse
}
