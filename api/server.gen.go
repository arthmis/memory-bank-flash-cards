// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
)

// Card defines model for Card.
type Card struct {
	Answer string `json:"answer"`

	// DeckId The id of the deck the card belongs to
	DeckId int32 `json:"deckId"`

	// Id card id
	Id int32 `json:"id"`

	// Question The question for the card
	Question string `json:"question"`
}

// Cards defines model for Cards.
type Cards struct {
	Cards []Card `json:"cards"`
}

// CreateDeckJSONBody defines parameters for CreateDeck.
type CreateDeckJSONBody struct {
	// Name The name of the deck
	Name string `json:"name"`
}

// CreateCardJSONBody defines parameters for CreateCard.
type CreateCardJSONBody struct {
	// Answer The answer for a card
	Answer string `json:"answer"`

	// Question The question for a card
	Question string `json:"question"`
}

// CreateDeckJSONRequestBody defines body for CreateDeck for application/json ContentType.
type CreateDeckJSONRequestBody CreateDeckJSONBody

// CreateCardJSONRequestBody defines body for CreateCard for application/json ContentType.
type CreateCardJSONRequestBody CreateCardJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create a new deck
	// (POST /api/decks)
	CreateDeck(ctx echo.Context) error
	// Get a deck by ID
	// (GET /api/decks/{deckId})
	GetDeckById(ctx echo.Context, deckId int) error
	// Get all cards in a deck
	// (GET /api/decks/{deckId}/cards)
	GetCardsByDeckId(ctx echo.Context, deckId int) error
	// Create a new card in a deck
	// (POST /api/decks/{deckId}/cards)
	CreateCard(ctx echo.Context, deckId int32) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// CreateDeck converts echo context to params.
func (w *ServerInterfaceWrapper) CreateDeck(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateDeck(ctx)
	return err
}

// GetDeckById converts echo context to params.
func (w *ServerInterfaceWrapper) GetDeckById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "deckId" -------------
	var deckId int

	err = runtime.BindStyledParameterWithOptions("simple", "deckId", ctx.Param("deckId"), &deckId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter deckId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDeckById(ctx, deckId)
	return err
}

// GetCardsByDeckId converts echo context to params.
func (w *ServerInterfaceWrapper) GetCardsByDeckId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "deckId" -------------
	var deckId int

	err = runtime.BindStyledParameterWithOptions("simple", "deckId", ctx.Param("deckId"), &deckId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter deckId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCardsByDeckId(ctx, deckId)
	return err
}

// CreateCard converts echo context to params.
func (w *ServerInterfaceWrapper) CreateCard(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "deckId" -------------
	var deckId int32

	err = runtime.BindStyledParameterWithOptions("simple", "deckId", ctx.Param("deckId"), &deckId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter deckId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateCard(ctx, deckId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/api/decks", wrapper.CreateDeck)
	router.GET(baseURL+"/api/decks/:deckId", wrapper.GetDeckById)
	router.GET(baseURL+"/api/decks/:deckId/cards", wrapper.GetCardsByDeckId)
	router.POST(baseURL+"/api/decks/:deckId/cards", wrapper.CreateCard)

}

type CreateDeckRequestObject struct {
	Body *CreateDeckJSONRequestBody
}

type CreateDeckResponseObject interface {
	VisitCreateDeckResponse(w http.ResponseWriter) error
}

type CreateDeck201JSONResponse struct {
	// Id The id of the deck
	Id int `json:"id"`

	// Name The name of the deck
	Name string `json:"name"`
}

func (response CreateDeck201JSONResponse) VisitCreateDeckResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateDeck401Response struct {
}

func (response CreateDeck401Response) VisitCreateDeckResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type CreateDeck500Response struct {
}

func (response CreateDeck500Response) VisitCreateDeckResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type GetDeckByIdRequestObject struct {
	DeckId int `json:"deckId"`
}

type GetDeckByIdResponseObject interface {
	VisitGetDeckByIdResponse(w http.ResponseWriter) error
}

type GetDeckById200JSONResponse struct {
	// Id The id of the deck
	Id int `json:"id"`

	// Name The name of the deck
	Name string `json:"name"`
}

func (response GetDeckById200JSONResponse) VisitGetDeckByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetDeckById401Response struct {
}

func (response GetDeckById401Response) VisitGetDeckByIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetDeckById500Response struct {
}

func (response GetDeckById500Response) VisitGetDeckByIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type GetCardsByDeckIdRequestObject struct {
	DeckId int `json:"deckId"`
}

type GetCardsByDeckIdResponseObject interface {
	VisitGetCardsByDeckIdResponse(w http.ResponseWriter) error
}

type GetCardsByDeckId200JSONResponse Cards

func (response GetCardsByDeckId200JSONResponse) VisitGetCardsByDeckIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCardsByDeckId401Response struct {
}

func (response GetCardsByDeckId401Response) VisitGetCardsByDeckIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetCardsByDeckId500Response struct {
}

func (response GetCardsByDeckId500Response) VisitGetCardsByDeckIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type CreateCardRequestObject struct {
	DeckId int32 `json:"deckId"`
	Body   *CreateCardJSONRequestBody
}

type CreateCardResponseObject interface {
	VisitCreateCardResponse(w http.ResponseWriter) error
}

type CreateCard201JSONResponse Card

func (response CreateCard201JSONResponse) VisitCreateCardResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateCard401Response struct {
}

func (response CreateCard401Response) VisitCreateCardResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type CreateCard500Response struct {
}

func (response CreateCard500Response) VisitCreateCardResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Create a new deck
	// (POST /api/decks)
	CreateDeck(ctx context.Context, request CreateDeckRequestObject) (CreateDeckResponseObject, error)
	// Get a deck by ID
	// (GET /api/decks/{deckId})
	GetDeckById(ctx context.Context, request GetDeckByIdRequestObject) (GetDeckByIdResponseObject, error)
	// Get all cards in a deck
	// (GET /api/decks/{deckId}/cards)
	GetCardsByDeckId(ctx context.Context, request GetCardsByDeckIdRequestObject) (GetCardsByDeckIdResponseObject, error)
	// Create a new card in a deck
	// (POST /api/decks/{deckId}/cards)
	CreateCard(ctx context.Context, request CreateCardRequestObject) (CreateCardResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// CreateDeck operation middleware
func (sh *strictHandler) CreateDeck(ctx echo.Context) error {
	var request CreateDeckRequestObject

	var body CreateDeckJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateDeck(ctx.Request().Context(), request.(CreateDeckRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateDeck")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CreateDeckResponseObject); ok {
		return validResponse.VisitCreateDeckResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetDeckById operation middleware
func (sh *strictHandler) GetDeckById(ctx echo.Context, deckId int) error {
	var request GetDeckByIdRequestObject

	request.DeckId = deckId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetDeckById(ctx.Request().Context(), request.(GetDeckByIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetDeckById")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetDeckByIdResponseObject); ok {
		return validResponse.VisitGetDeckByIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetCardsByDeckId operation middleware
func (sh *strictHandler) GetCardsByDeckId(ctx echo.Context, deckId int) error {
	var request GetCardsByDeckIdRequestObject

	request.DeckId = deckId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetCardsByDeckId(ctx.Request().Context(), request.(GetCardsByDeckIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCardsByDeckId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetCardsByDeckIdResponseObject); ok {
		return validResponse.VisitGetCardsByDeckIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// CreateCard operation middleware
func (sh *strictHandler) CreateCard(ctx echo.Context, deckId int32) error {
	var request CreateCardRequestObject

	request.DeckId = deckId

	var body CreateCardJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateCard(ctx.Request().Context(), request.(CreateCardRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateCard")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CreateCardResponseObject); ok {
		return validResponse.VisitCreateCardResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}
